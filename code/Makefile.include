# -*- makefile -*-

default: all
.PHONY: default

CROSS_COMPILE := arm-linux-

LINKERSCRIPT := $(MC1322X)/mc1322x.lds
LIBMC1322X := $(MC1322X)/lib

PLATFORM_LDFLAGS =
PLATFORM_RELFLAGS = -fno-strict-aliasing  -fno-common -ffixed-r8 -ffunction-sections -msoft-float -Wcast-align -Wall
PLATFORM_CPPFLAGS = -march=armv4t -mlong-calls -mtune=arm7tdmi-s -DCONFIG_ARM -D__ARM__ -mthumb-interwork 
THUMB_FLAGS= -mthumb -mcallee-super-interworking

#########################################################################

#
# Include the make variables (CC, etc...)
#
AS	= $(CROSS_COMPILE)as
LD	= $(CROSS_COMPILE)ld
CC	= $(CROSS_COMPILE)gcc
CPP	= $(CC) -E
AR	= $(CROSS_COMPILE)ar
NM	= $(CROSS_COMPILE)nm
STRIP	= $(CROSS_COMPILE)strip
OBJCOPY = $(CROSS_COMPILE)objcopy
OBJDUMP = $(CROSS_COMPILE)objdump
RANLIB	= $(CROSS_COMPILE)RANLIB

RELFLAGS= $(PLATFORM_RELFLAGS)
DBGFLAGS= -g -DDEBUG
OPTFLAGS= -Os #-fomit-frame-pointer
LDSCRIPT := boot.lds
OBJCFLAGS += --gap-fill=0xff
ARFLAGS = cru

gccincdir := $(shell $(CC) -print-file-name=include)

CPPFLAGS := $(DBGFLAGS) $(OPTFLAGS) $(RELFLAGS)		\
	-D__KERNEL__ -DTEXT_BASE=$(TEXT_BASE)		\
	-std=gnu99 -fno-builtin -ffreestanding -isystem	\
	$(gccincdir) -pipe $(PLATFORM_CPPFLAGS)

CFLAGS := $(CPPFLAGS) -Wall -Wstrict-prototypes -Wcast-align -Wextra -Werror

AFLAGS_DEBUG := -Wa,-gstabs
AFLAGS := $(AFLAGS_DEBUG) -D__ASSEMBLY__ $(CPPFLAGS)

LDFLAGS += -T $(LINKERSCRIPT) -nostartfiles -static -Wl,-Map=$*.map -export-dynamic

#########################################################################

export	CROSS_COMPILE AS LD CC CPP AR NM STRIP OBJCOPY OBJDUMP MAKE
export	TEXT_BASE PLATFORM_CPPFLAGS PLATFORM_RELFLAGS CPPFLAGS CFLAGS AFLAGS

#########################################################################

OBJDIR := $(MC1322X)/obj/

$(OBJDIR):
	mkdir $(OBJDIR)

include $(LIBMC1322X)/Makefile.lib

CFLAGS += -I$(MC1322X)/src -I$(MC1322X)/kernel 

ifdef TARGET_ROM_VARS
	START = $(MC1322X)/src/start-romvars.o		
endif

# default start and isr
ifndef START
	START = $(MC1322X)/src/start.o	
endif
ifndef ISR
	ISR = $(MC1322X)/src/isr.o
endif
ifndef SWI
	SWI = $(MC1322X)/src/swi.o
endif
ifndef PINIO
	PINIO = $(MC1322X)/src/pinio.o
endif
SRCOBJS += $(MC1322X)/src/default_lowlevel.o $(ISR) $(START) $(SWI) $(PINIO)
BOARDOBJS := $(addprefix $(OBJDIR)/,$(COBJS))

ARCH  = arm
CPU   = arm7tdmi-s
export	ARCH CPU VENDOR

.SECONDARY:

### See http://make.paulandlesley.org/autodep.html#advanced
-include ${addprefix $(OBJDIR)/,$(addsuffix .d,$(TARGETS))}

define FINALIZE_DEPENDENCY
cp $(@:.o=.d) $(@:.o=.$$$$); \
sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
    -e '/^$$/ d' -e 's/$$/ :/' < $(@:.o=.$$$$) >> $(@:.o=.d); \
rm -f $(@:.o=.$$$$)
endef

$(START): $(START:.o=.s)
	$(CC) $(AFLAGS) -c -o $@ $<
$(MC1322X)/src/start-romvars.s:	$(MC1322X)/src/start.S
	$(CPP) $(AFLAGS) -DUSE_INTS -DUSE_ROM_VECTS -DUSE_ROM_VARS -o $@ $<
$(MC1322X)/src/start-romvects.s: $(MC1322X)/src/start.S
	$(CPP) $(AFLAGS) -DUSE_INTS -DUSE_ROM_VECTS -o $@ $<

$(ISR): $(ISR:.o=.c)
	$(CC) $(CFLAGS) $(ARM_FLAGS) -MMD $< -c -o $@
	@$(FINALIZE_DEPENDENCY)

$(SWI): $(SWI:.o=.c)
	$(CC) $(CFLAGS) $(ARM_FLAGS) -MMD $< -c -o $@
	@$(FINALIZE_DEPENDENCY)



ifdef COBJS
BOARDARCS := $(OBJDIR)/board.a(${filter $(OBJDIR)/%.o,$(BOARDOBJS)})
endif
empty-board-a:
	$(AR) $(ARFLAGS) $(OBJDIR)/board.a
.PHONY: empty-board-a

$(OBJDIR)/board.a: empty-board-a $(BOARDARCS) $(BOARDOBJS)
$(MC1322X)/src/src.a: $(MC1322X)/src/src.a($(SRCOBJS))

%.elf:	$(OBJDIR)/%.o $(START) $(ISR) $(SWI) $(PINIO) $(SRCOBJS) $(LINKERSCRIPT) $(LIBMC1322X)/libmc1322x.a $(OBJDIR)/board.a $(MC1322X)/src/src.a
	$(CC) $(LDFLAGS)  \
	-L $(LIBMC1322X) -L $(MC1322X)/src -L $(OBJDIR) $< -o $@ $(START) $(MC1322X)/src/src.a --start-group $(OBJDIR)/board.a $(LIBMC1322X)/libmc1322x.a -lm --end-group

%.srec:		%.elf
		$(OBJCOPY) ${OBJCFLAGS} -O srec $< $@

%.ihex: 	%.elf
		$(OBJCOPY) ${OBJCFLAGS} -O ihex $< $@

%.bin:		%.elf
		$(OBJCOPY) ${OBJCFLAGS} -O binary $< $@

%.dis:		%.elf
		$(OBJDUMP) -SD $< > $@

%.s: %.S
	$(CPP) $(AFLAGS) -o $@ $<
%.o: %.S
	$(CC) $(AFLAGS) -MMD -c -o $@ $<
	@$(FINALIZE_DEPENDENCY)
%.o:	%.c
	$(CC) $(CFLAGS) $(THUMB_FLAGS) -MMD -c -o $@ $<
	@$(FINALIZE_DEPENDENCY)

$(OBJDIR)/%.s:	%.S
	$(CPP) $(AFLAGS) -o $@ $<
$(OBJDIR)/%.o:	%.S
	$(CC) $(AFLAGS) -MMD -c -o $@ $<
	@$(FINALIZE_DEPENDENCY)
$(OBJDIR)/%.o:	%.c
	$(CC) $(CFLAGS) $(THUMB_FLAGS) -MMD -c -o $@ $<
	@$(FINALIZE_DEPENDENCY)

clean:
	find $(MC1322X) \
		\( -name 'core' -o -name '*.bak' -o -name '*~' \
		-o -name '*.o'  -o -name '*.a' -o -name '*.obj' -o -name '*.elf'  -o -name '*.s' -o -name '*.map' \
                -o -name 'obj_*_board' -o -name '.depend' -o -name '*.bin' -o -name '*.dis' -o -name '*.d' -o -name '*.srec' \) -print \
		| xargs rm -rf
	rm -fr *.*~	
	find \
		\( -name 'core' -o -name '*.bak' -o -name '*~' \
		-o -name '*.o'  -o -name '*.a' -o -name '*.obj' -o -name '*.elf'  -o -name '*.s' -o -name '*.map' \
                -o -name 'obj_*_board' -o -name '.depend' -o -name '*.bin' -o -name '*.dis' -o -name '*.d' -o -name '*.srec' \) -print \
		| xargs rm -rf
	rm -fr *.*~	
	make -C $(MC1322X)/tools/ftditools/ clean
clobber \
mrproper \
distclean:	clean

.PHONY: clean clobber mrproper distclean 

all: $(OBJDIR)
	for target in $(TARGETS); do make $$target.bin; done
	for target in $(TARGETS_WITH_ROM_VARS);   do make TARGET_ROM_VARS=1 $$target.bin; done

.PHONY: all 


